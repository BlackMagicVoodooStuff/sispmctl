.\"     Title: gemplug
.\"    Author: Heike C. Zimmerer <hcz@hczim.de>
.\"      Date: Time-stamp: <2008-04-29 21:46:54 hcz>
.\"    Manual: gemplug
.\"    Source: gemplug
.\"
.TH "GEMPLUG" "19" "April 2008" "gemplug"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
gemplug - control silver shield PM outlets
.SH "SYNOPSIS"
.HP
\fBgemplug [-opts] [<outlet-name>]\fR
.RS 4
lists available outlets along with their state
.RE
.HP
\fBgemplug [-opts]  <outlet-name> off|0|on|1\fR
.RS 4
Switch Gembird power outlets
.RE
.RE
.HP
\fBgemplug [-opts] <outlet-name> off|0|on|1 at|after|until|for <time-spec> [at|after|until|for [...]]\fR
.RS 4
Switch Gembird outlets at specified times
.RE
.RE

.SH "DESCRIPTION"
.PP
Silver Shield PM power switches are USB controlled power outlets.
They are referred to here as "Gembirds".
.PP
\fBgemplug\fR allows you to control your Gembirds in various ways,
e.g., by accessing them by name, by scheduling and managing timed
jobs, and by handling multiple devices in a transparent manner. It
delegates the task of actually accessing the hardware to
\fBsispmctl(1)\fR.  At the time of this writing, at least version 2.8
of sispmctl must be available before you can run gemplug successfully.
.PP
Timed jobs are handed over to the \fBat\fR command and rounded to the
nearest minute.
.PP
For a quick start, scroll down to the section named "QUICK START".
.SH "OPTIONS"
Outlet names may always be abbreviated to the right (need to match
only the beginning of a name) as long as the resulting substring is
still unique.
.SS "Job related"
.PP
gemplug's jobs are passed to the 'at' command for timed execution.
You may examine and change the active jobs with the following commands.
.PP
\fB\-j [<outlet-name> [...]]\fR 
.RS 4
list pending jobs.  You may add any
number of outlet names for which pending jobs are to be listed.
Without any name, all pending jobs are displayed.
.RE
.PP
\fB-k <outlet-name> [...]\fR
.RS 4
kill pending jobs.  You need to name at least one outlet.  To kill all
pending jobs for all outlets, use \fBALL\fR (in upper case) as the
outlet name.
.RE
.PP
\fB-p <jobnum> [<jobnum> [...]]\fR
.RS 4
purge individual pending jobs by job number.  The job number is output
in the first column (before the colon) when you list jobs by calling
gemplug with the \fB\-j\fR option.
.RE
.PP
\fB\-a\fR
.RS 4
tells gemplug to add whatever actions are given on the rest of the
command line to already pending jobs (if any).  If there are any jobs
already scheduled for an outlet, you must give either \fB\-r\fR or
\fB\-a\fR when you enter new timed jobs for the same outlet.
.RE
.PP
\fB\-r\fR
.RS 4
tells gemplug to remove already pending jobs (if any) for the current
action's outlet before executing the rest of the command line.  If
there are any jobs already scheduled for an outlet, you must give
either \fB\-r\fR or \fB\-a\fR when you enter new timed jobs for the
same outlet.  When an outlet is named, but no action, this is roughly
the same as \fB-k <outlet>\fR except that the state of the outlet is
printed too.
.RE
.PP
.SS "Listing options and output control"
\fB\-t\fR
.RS 4
test mode: show what actions would have been taken or scheduled
without actually doing any scheduling.  Pending jobs are not removed
even if you also specify \fB\-r\fR.  This mode may come in handy in order
to test the effect of date/time formats and other scheduling details.
.RE
.PP
\fB\-l [<outlet-name> [...]]\fR
.RS 4
list the states (on/off) of the outlets named on the rest of the
command line.  Without any name, lists all.  Using -l without any or with
exactly one argument is the same as calling gemplug without the \fB\-l\fR.
.RE
.PP
\fB\-d [<outlet-name> [...]]\fR
.RS 4
Dumps all configuration information gemplug has accumulated for the
named outlets in formatted form.  If no outlet is named, information
about all outlets is written out.
.RE
.PP
\fB\-c\fR
.RS 4
Never use colors in output.  Colors are otherwise used to display an
outlet's state and to emphasize error messages when stdout is connected
to a terminal with a known $TERM.
.RE
.PP
\fB\-n\fR
.RS 4
Replaces the "(on)" and "(off)" texts used to report outlet
states by either a "1" or a "0" (without the quotes).  For use
(possibly in conjunction with \fB\-q\fR) in scripts.
.RE
.PP
\fB\-q\fR
.RS 4
Quiet operation.  Removes all text from outlet state queries except
for the raw results ("(off)", "(on)", "0", "1") and error messages.
.RE
.PP
\fB\-g <outlet-name> \fR
.RS 4
Get outlet state.  Report nothing, but set the program's exit code to
0 (true) if the outlet is powered on, else to 1 (false).
.RE
.PP
\fB\-f\fR
.RS 4
Force reconfiguration.  Redisplays some non-fatal errors and
warnings which usually are printed only once.  Normally, they are not
displayed again until gemplug's internal configuration data is rebuilt
because of some hardware or configuration file change.
.RE
.PP
\fB\-v\fR
.RS 4
Do verbose reporting.  This is mainly a debugging option for the
configuration file parser.
.RE
.PP
\fB\-C\fR
.RS 4
Executes a \fBchmod a+rw\fR command on all Gembird device nodes.
You most probably will need root privileges (e.g, from sudo) to
execute this successfully.  Also note that the configuration files in
your home directory might be out of reach if $HOME is changed to
root's home.  This is not a problem with plain sudo.
.RE
.PP
\fB\-T\fR
.RS 4
Writes out templates for not yet configured devices to stdout,
giving the new devices and their outlets standard names while taking
some care to avoid name clashes with already existing names.  Use this
to inspect the new lines before adding them with the \fB-TW\fR command
below.
.RE
.PP
\fB\-TW\fR
.RS 4
Adds templates for not yet configured devices to your
configuration file.  If there's none, a new gemplugrc will be created
including an initial comment describing its syntax.  If there's
already a configuration file on your system, it must be writable by
you.  If it resides in /etc/gemplug, chances are good that only root
can execute this command successfully.  Since we're appending at the
end of the current file, no backup copy is done.
.RE
.PP
.SS Misc options
\fB\-x \fR
.RS 4
Script debug.  It will output an enormous amount of boring lines
which are of no interest to the end user.  Use this if asked to do so
because of a bug report.
.RE
.PP
\fB\-L, --license\fR
.RS 4
Display license information.
.RE
.PP
\fB\--version\fR
.RS 4
Display version info.  Don't forget to include the output of this
command if you contact the maintainer.
.RE
.PP
\fB\-h, --help\fR
.RS 4
Display help screen.
.RE
.PP
.SH "USAGE NOTES"
.PP
Except for some special options, a gemplug command line always looks
like one of the following four lines:
.SS "gemplug"
.SS "gemplug <outlet-name>"
Query all outlets (first line) or the named one (second line).
.SS "gemplug device off|0|on|1"
Switch an outlet.
.SS "gemplug device off|on <timed action> ..."
Switch an outlet at specified times.  There are four keywords
available to introduce timed actions: \fBat\fR, \fBafter\fR,
\fBuntil\fR and \fBfor\fR.  Each one of them must be followed by one
argument describing the desired fixed time or a time interval.  Note
that this always must be exactly \fBone\fR argument.  So either don't
include white space in your time specification, or enclose it within
single or double quotes to prevent the shell from splitting it up in
to several smaller pieces.
.PP
There are two basic forms of a time specification: You may either wish
to specify a \fBtime interval\fR with \fBafter\fR or \fBfor\fR, or you may
specify a \fBfixed time\fR of some day using \fBat\fR and \fBuntil\fR.
.TP 4
\fBinterval specification\fR 
.\"
A time interval as required by \fBafter\fR and \fBfor\fR consists of
days, hours and minutes in descending order, with at least one element
marked as being d[ay], h[our], m[inute] or a ':' (separator between
hours and minutes).  Elements may be omitted as long as their order is
preserved.  Some examples of valid intervals:
.PP
.RS 4
.RS 4
"2 days 3 hours 5 minutes"
"2d 03h 5 min"
.RE
.RS 4
"2d 3:05"
2d3h05
"2 3:05"
.RE
.RS 4
3h05 "3:05" "3h 5 minutes" 2h5min
.RE
.RS 4
"2days 3hours" 3d5h
.RE
.RS 4
"2days"
.RE
.RS 4
"5 min" 5m :05
.RE
.RS 4
"2days 5min" "2days :05"  2d0:05
.RE
.RE
.PP
.RS 4
As can be seen, nearly all combinations which make at least some sense
are accepted.  
.PP
Time intervals are cumulative: They get added to the last time
encountered before on the same command line, be it the end of an
interval or a fixed time.  Failing that (if it is the first time
specification on the line), the interval is added to the current date
and time to yield the fixed time the event is to be scheduled at.
.RE
.TP 4
\fBfixed time-of-day specification\fR 
.\"
The keywords \fBat\fR and \fBuntil\fR expect fixed time-of-day
specifications.  Any format which is acceptable by the GNU 'date -d'
command may be used.  Unfortunately, this doesn't include the ISO date
format.  Depending on the part of the world you live in, you might
succeed or not with the kind of specification you're used to.  A safe
bet is to name the time of day first in hh:mm format, then (if needed)
to add a space followed by the calendar date in a fairly free format,
and finally to enclose the whole thing within single or double quotes,
as in:
.PP
.RS 8
"10:45"
.RE
.RS 8
"10:45 Jun 3"
.RE
.RS 8
"10:45 2008-07-24"
.RE
.RS 8
"10:45 Friday"
.RE
.PP
.RS 4
There's one exception to the GNU \fBdate -d\fR rule: if you specify a time
of day, but no date, the date -d command always will return today's
date and time even if that time lies in the past.  In this case,
gemplug will assume there's no time machine available which would
allow it to modify past events and schedule instead for the same time,
but tomorrow.
.RE
.PP
The available syntax variations which allow you to schedule an action
are as follows:
.TP 4
\fBat <time-spec>\fR 
.\"
Schedules the event described in the command line's first two
non-option arguments to execute at the specified time.  For the format
of \fB<time-spec>\fR, see the paragraph "\fBfixed time-of-day
specification\fR" above.
.TP 4
\fBuntil <time-spec>\fR 
.\" 
Schedules the opposite action to the event described in the command
line's first two non-option arguments to execute at the specified
time.  For the format of \fB<time-spec>\fR, see the paragraph
"\fBfixed time-of-day specification\fR" above.
If there's no preceding non-opposite action, gemplug will assume it is to
be taken now and execute it.
.TP 4
\fBafter <interval-spec>\fR 
Schedules the event described in the command line's first two
non-option arguments to execute after the specified time interval.  For
the format of \fB<interval-spec>\fR, see the paragraph "\fBinterval
specification"\fR above.
.TP 4
\fBfor <interval-spec>\fR 
Schedules the opposite action to the event described in the command
line's first two non-option arguments to execute after the specified
time interval.  For the format of \fB<interval-spec>\fR, see the
paragraph "\fBinterval specifications\fR" above.  If
there's no preceding non-opposite action, gemplug will assume it is to be
taken now and execute it.
.PP
While this may sound complex, it really isn't.  Some examples:
.PP
.RS 4
\fBgemplug printer on for 30min\fR
.RE
.RS 4
\fBgemplug printer off at '19:00 Friday' for 2days
.RE
.RS 4
\fBgemplug Laptop-loader on after 2h for 12h\fR
.RE
.PP
You can tell from reading the above commands what they'll do.
.PP
Just remember that the first two non-option command line arguments
describe first the outlet and then the action to be taken on it.
After those two follow the specifications when to do that using any
combination of \fBat\fR, \fBafter\fR, \fBuntil\fR, and \fBfor\fR.
Time or interval specifications must be enclosed in quotes if there
are spaces inside.  That's about all.
.PP
Timed actions will only be scheduled as a whole if the entire command
line proves to be correct.  Else a message will be printed stating
that none of the preceding parts has been scheduled.
.PP
Note that you can test any combination you like with the \fB\-t\fR
(test) option.  You'll get a response stating what would have been
executed without actually scheduling anything.  This applies to all
timed actions, including the pending ones if \fB\-r\fR is specified
too.
.SH "QUICK START"
.PP
If you're going to run gemplug for the first time, and if you already
have installed sispmctl, and there are one or more Gembird devices
connected, just start gemplug without any arguments (you may need to
use sudo if you get permission errors).  gemplug will suggest to
create a template file for you.  Follow the advice by calling gemplug
with \fB\-TW\fR.  It will create a new template and write it to the
first position in its search path which is writable by you.  
.PP
From now on, you can execute all the commands listed here.
.PP
gemplug will also suggest you to edit that file while displaying its
path.  You may want to do that now or later in order to give your
devices and outlets more meaningful names and to remove either the
"pos =" or "serial =" statements (see "SELECTING FROM MULTIPLE DEVIES"
below).  If you did use sudo, \fBchown(1)\fR that file to be owned by
you before editing.
.PP
To solve permission problems, have a glance at the section "HELPER FILES"
below.
.PP
.SH "HELPER FILES"
.SS "udev rule"
While the \fB-C\fR option has been included to allow you to make your
Gembird devices world-writable without the need to know their
exact \fB/dev/\fR path (and there may be distribution-dependent ways
to achieve the same, e.g. an USB group), the preferred way is to use an
udev rule for that.  A sample file, \fB74-sispmctl.rules\fR, is
included in the distribution, which accomplishes this task if copied
over to the \fB/etc/udev/rules.d\fR directory.
.PP
In its default form, it makes all Gembird devices world writable when
they are encountered during the boot process or when added later.
.PP
If you prefer to make your Gembirds only available to a subset of
users, an alternative rule is provided.  De-comment it, en-comment the
original rule and follow the advice in the file's comment to create a
new group and to add the users in question to it.
.PP
.SS "Bash completion"
The file \fBgemplug-completion.sh\fR, when put into your
/etc/bash_completion.d directory, allows bash to automagically
complete outlet names.  Two usage examples: To have all outlet names
listed, type \fBgemplug <TAB> <TAB>\fR.  Typing \fBgemplug t<TAB>\fR
will complete the unambigous part of all outlet names which start
in 'T' or 't'.  If more than one name matches, a second \fB<TAB>\fR
will display all of them.
.SH "SELECTING FROM MULIPLE DEVICES"
.PP
gemplug was developed in the frist place since there was no way to
access different Gembirds connected the same computer in a reliable
way.
.PP
As of sispmctl 2.7 and up, you now have 2 choices: USB topological
position or serial number.  Each one has its advantages and drawbacks.
.SS "USB position"
If you use the "pos =" statement in your configuration file, devices
are identified by the way their signal passes USB.  You can exchange
Gembird devices as long as their connections (this includes all outlet
positions on any hubs and cables up to and including the USB plug on
your system) are left unchanged, 
.PP
The advantage is that you can easily exchange the actual device (not
all Gembirds here prove to be totally stable, expecially if there is a
lot of other traffic on the same hub not belonging to them).  The
drawback is that once you change some physical connection, you'll get
two informational messages - the first one to state that some Gembird
has disappeared and the second that there's a new device discovered
for which no configuration is available.  As both inidcate the USB
position, you can to insert manually the new position by replacing the
old one in the configuration file.  If you change your cabling often,
this may become tedious and you should start to think about using
serial numbers instead.
.SS "Serial numbers"
Starting with sispmctl 2.7, the serial number of Gembird devices is
reported back.  If you identify your Gembirds by serial number, the
same physical device will keep its name wherever it is plugged on to
the USB.  You cannot exchange Gembirds, but you can change your
cabling as you like.  NOTE: As of the time of this writing, this
interface doesn't always yield stable serial numbers and
is therefore not yet recommended.
.SH "CONFIGURATION FILE SYNTAX"
The configuration file's syntax will be written as an initial comment
to the configuration file when a template is created from scratch
(i.e., in the absence of a configuration file and \fBgemplug \-TW\fR)
together with a syntactically correct template file ready to edit.
.PP
The syntax rules are repeated here for reference.
.PP
.SS Continuation lines
A backslash immediately before end of line causes the next line to be
appended (made part of the current line).  The sequence \fB\\n\\\fR
causes a newline to be inserted before the next line is appended.
This is only really useful with pre-on, pre-off, post-on and post-off
lines.
.SS "Comments"
\'#' and \':' at the start of a word (i.e. after white space or a
newline) start a comment.  All text up to the end of the line will be
ignored.
.SS "Case"
All matching is done without regard to case (case-insensitive).
.SS "Names (outlet and Gembird device identifiers)"
Names can be made of any non-whitespace characters.  They are allowed
to include anything but the following: 
.RS 1
- They cannot start with a comment character ('#', ';')
.RE
.RS 1
- White space cannot be embedded as it is a delimiter,
.RE
.RS 1
- In device (=section) names '[' and ']' cannot be used (delimiters)
.RE
.SS "Indenting"
Indenting is not mandatory; leading white space is always ignored.
Use it as you like, In all places where white space is
allowed/required, any amount can be used.

.SS "Key elements"
All the descriptions of the key elements below are preceded by an example
line demonstrating their use.
.PP
.TP 4
\fB[ Gebird_name ]\fR
.\"
Starts a device section, giving the device and the section the name
within the brackets.  Any white space between brackets and device name is
optional.
.TP 4
\fBpos = 3.1\fR
.\"
Names the topological position of the device on the USB as reported by
\fBgemplug -d <one-of-its-outlets>\fR.
.TP 4
\fBserial = 01:02:03:04:05\fR
.\"
Names the Gembird's serial number as reported by \fBgemplug -d <one-of-its-outlets>\fR or \fBsispmctl -S\fR.
.TP 4
\fB1 = Outlet-name [Alias ...]\fR
.\"
Number, '=', Name Aliases ...  names the individual plug outlets.  It
can only be used if at least one of \fBpos\fR or \fBserial\fR are
given before and in the same section.  If both are given, they are
required to match the same device.  Outlet numbers (the numbers in the
first column) count from number 1 upwards per device.  
.TP 4
\fBpre-on = <your_commands>\fR, also \fBpost-on\fR, \fBpre-off\fR, \fBpost-off\fR
.\"
The part after the equals sign is fed to \fB$SHELL -c\fR (or, if
empty, \fB/bin/sh -c\fR) before resp. after switching on resp. off.
This allows you to build timed sequences for powering up or shutdown.
If you include gemplug commands there, beware of recursive loops
before they eat up all your resources.  Also always include the -L (no
locking) option if you place a gemplug command there.
.SH "FILES"
.PP
.TP 4
\fBgemplugrc\fR
The user-editable configuration file.
.\"
.RE
.TP 4
\fBcompiled_rc\fR
.\"
gemplug's internal representation of the user's and the hardware
configuration.  Automatically updated when gemplugrc is found to be
newer or when hardware configuration changes.
.TP 4
\fBlast_sispmctl_S\fR
.\"
The hardware configuration gemplug's \fBcomplied_rc\fR was built for
is stored here.  Every time the hardware configuration changes, the
internal representation will be rebuilt and this file gets updated.
.\"
.RE
.PP
gemplug looks for the above files in the following places and in this
order (first searched first, first match stops):
.PP
.RS 4
\fB$HOME/.config/gemplug/
.RE
.RS 4
$HOME/.gemplug/
.RE
.RS 4
/etc/gemplug/\fR
.RE
.PP
gemplug needs a directory writable by the user for intermediate
configuration storage.  It fist tries the directory where it has found
its \fBgemplugrc\fR configuration file.  If the system administer
decides to put gemplugrc into \fB/etc/gemplug/\fR, the user most
probably will have no write access there, and the first
parent-writable place along the above search path will be used to
create an additional directory, \fBgemplug/\fR or \fB.gemplug/\fR, for
the user's files.  So gemplugrc and gemplug's intermediate files must not
necessarily be placed in the same directory.
.SH "EXIT CODE"
Without the \fB-g\fR option, gemplug returns 0 on success or 143
on error.  The \fB\-g\fR option returns either 0 (outlet
active), 1 (outlet off), or 143 (error).
.SH "CAVEATS"
at Jobs are scheduled on a per user basis.  This means that you can
only see and handle your own jobs.  You won't get informed if another
user has scheduled actions for the same outlet and you cannot do
anything about them.
.PP
You need a fairly recent Bash as its regexp syntax has been changed in
2007.  You need GNU date and GNU stat to successfully run this
program.
.PP
.SH "SECURITY"
Anyone who has write access to gemplug's internal configuration file
can execute any command they like within the context of the current
user.  This file is named \fBcompiled_rc\fR.  The first one which is
found along the search path will be taken.  (When it is written, the
fist writable parent directory along the search path is used to create
gemplug's directory and to put it in there).  This means that it is
usually really not a good idea to give world write permissions to
\fB/etc/gemplug/\fR.  Make sure this directory and its contents are
writable by root only if you decide to put a global gemplugrc there.
.SH "EXAMPLES"
Assuming your configuration file looks like that:
.PP
.RS 4
# sample configuration
.PP
[ Peripherals ]
  pos = 4-2.2
  1 = Scanner
  2 = Printer Laser
  3 = DVB-T DVBT
  4 = Backup1 Backup_1 B1 ICY ext_ATA
.RE
.PP
the commands
.TP 4
\fBgemplug scanner on\fR
and
.TP 4
\fBgemplug scanner 1\fR
will switch your scanner on immediately
.TP 4
\fBgemplug DVBT 1 for 30min\fR
.\"
activates the DVB receiver for 30 minutes (note there's no white space
within the time specification, else it must be enclosed in quotes), and
.TP 4
\fBgemplug Backup1 until tomorrow\fR
will activate the external Backup for exactly 24 hours until the same
time of day tomorrow.
.PP
See the \fBUSAGE\fR chapter for a few more examples.
.SH BUGS
There are, yes.  Helpful hints are welcome at hcz@hczim.de.  Include
the magic word \fBgemplug\fR somewhere in your subject line.
.PP
sispmctl's output seems not always stable under any USB condition.
Therefore, all calls are re-checked for a stable readout and/or a
successful change of state.
.SH "THANKS TO"
\fBMondrian Nuessle\fR <nuessle@uni-mannheim.de> for writing \fBsispmctl\fR
and maintaining it.  \fBsispmctl\fR is the basic hardware interface gemplug
relies on.
.SH "HELP"
A user forum can be found at
http://sourceforge.net/projects/sispmctl .  You can contact the author
at hcz@hczim.de.  Don't forget to include the output of \fBgemplug
--version\fR.
.SH "AUTHOR"
(C)2008 by Heike C. Zimmerer.  This program is licensed under the GNU
Public License (GPL), version 3.
.SH "SEE ALSO"
\fBsispmctl(1)\fR, \fBdate(1)\fR

